{"version":3,"file":"alpine-mousedrag-plugin.js","sources":["../src/index.ts"],"sourcesContent":["import type { Alpine } from 'alpinejs';\n\ninterface MouseDragOptions {\n  disableInertia?: boolean;\n  friction?: number;\n  speedFactor?: number;\n}\n\nconst DEFAULT_OPTIONS: MouseDragOptions = {\n  disableInertia: false,\n  friction: 0.9,\n  speedFactor: 1.5,\n};\n\n/**\n * Alpine.js plugin that adds a mousedrag directive for scrolling elements with mouse drag and inertia\n */\nconst AlpineMouseDragPlugin = (Alpine: Alpine) => {\n  Alpine.directive(\n    'mousedrag',\n    (\n      el: HTMLElement,\n      {\n        modifiers,\n        expression,\n      }: {\n        type: string;\n        value: string;\n        modifiers: string[];\n        expression: string;\n        original: string;\n      },\n    ): (() => void) => {\n      // State variables\n      let isPointerDown = false;\n      let lastX = 0;\n      let lastY = 0;\n      let velocityX = 0;\n      let velocityY = 0;\n      let originalScrollSnap = '';\n\n      // Parse directive options\n      const options: MouseDragOptions = {\n        ...DEFAULT_OPTIONS,\n        disableInertia: modifiers.includes('disableinertia'),\n      };\n\n      if (expression && !isNaN(Number(expression))) {\n        options.speedFactor = Number(expression);\n      }\n\n      const friction = options.disableInertia ? 1 : (options.friction ?? 0.9);\n      const speedFactor = options.speedFactor ?? 1.5;\n\n      // Apply non-linear speed adjustment based on distance\n      const applySpeedCurve = (delta: number): number => {\n        const absDelta = Math.abs(delta);\n        return (\n          (Math.sign(delta) * Math.pow(absDelta, speedFactor)) /\n          Math.pow(10, speedFactor - 1)\n        );\n      };\n\n      // Common pointer handling\n      const handlePointerStart = (x: number, y: number, event?: Event) => {\n        isPointerDown = true;\n        lastX = x;\n        lastY = y;\n\n        originalScrollSnap = getComputedStyle(el).scrollSnapType;\n        el.style.scrollSnapType = 'none';\n\n        if (event) event.preventDefault?.();\n      };\n\n      const handlePointerMove = (x: number, y: number, event?: Event) => {\n        if (!isPointerDown) return;\n\n        const deltaX = x - lastX;\n        const deltaY = y - lastY;\n\n        lastX = x;\n        lastY = y;\n\n        const scaledDeltaX = applySpeedCurve(deltaX);\n        const scaledDeltaY = applySpeedCurve(deltaY);\n\n        velocityX = scaledDeltaX;\n        velocityY = scaledDeltaY;\n\n        el.scrollLeft -= scaledDeltaX;\n        el.scrollTop -= scaledDeltaY;\n\n        if (event) event.preventDefault?.();\n      };\n\n      const handlePointerEnd = () => {\n        if (!isPointerDown) return;\n        isPointerDown = false;\n\n        if (friction < 1) {\n          requestAnimationFrame(() => applyInertia());\n        } else {\n          el.style.scrollSnapType = originalScrollSnap;\n        }\n      };\n\n      const applyInertia = () => {\n        if (Math.abs(velocityX) > 1 || Math.abs(velocityY) > 1) {\n          el.scrollLeft -= velocityX;\n          el.scrollTop -= velocityY;\n          velocityX *= friction;\n          velocityY *= friction;\n          requestAnimationFrame(applyInertia);\n        } else {\n          el.style.scrollSnapType = originalScrollSnap;\n        }\n      };\n\n      // Mouse event handlers\n      const onMouseDown = (e: MouseEvent) => {\n        if (e.button !== 0) return; // Only left mouse button\n        handlePointerStart(e.clientX, e.clientY);\n      };\n\n      const onMouseMove = (e: MouseEvent) => {\n        handlePointerMove(e.clientX, e.clientY);\n      };\n\n      // Touch event handlers\n      const onTouchStart = (e: TouchEvent) => {\n        if (e.touches.length !== 1) return; // Only single touch\n        handlePointerStart(e.touches[0].clientX, e.touches[0].clientY, e);\n      };\n\n      const onTouchMove = (e: TouchEvent) => {\n        if (e.touches.length !== 1) return;\n        handlePointerMove(e.touches[0].clientX, e.touches[0].clientY, e);\n      };\n\n      // Add event listeners\n      el.addEventListener('mousedown', onMouseDown);\n      el.addEventListener('mousemove', onMouseMove);\n      window.addEventListener('mouseup', handlePointerEnd);\n\n      el.addEventListener('touchstart', onTouchStart, { passive: false });\n      el.addEventListener('touchmove', onTouchMove, { passive: false });\n      el.addEventListener('touchend', handlePointerEnd);\n\n      // Return cleanup function\n      return () => {\n        el.removeEventListener('mousedown', onMouseDown);\n        el.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', handlePointerEnd);\n\n        el.removeEventListener('touchstart', onTouchStart);\n        el.removeEventListener('touchmove', onTouchMove);\n        el.removeEventListener('touchend', handlePointerEnd);\n      };\n    },\n  );\n};\n\nexport default AlpineMouseDragPlugin;\n"],"names":["DEFAULT_OPTIONS","AlpineMouseDragPlugin","Alpine","el","modifiers","expression","isPointerDown","lastX","lastY","velocityX","velocityY","originalScrollSnap","options","friction","speedFactor","applySpeedCurve","delta","absDelta","handlePointerStart","x","y","event","_a","handlePointerMove","deltaX","deltaY","scaledDeltaX","scaledDeltaY","handlePointerEnd","applyInertia","onMouseDown","e","onMouseMove","onTouchStart","onTouchMove"],"mappings":"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"}